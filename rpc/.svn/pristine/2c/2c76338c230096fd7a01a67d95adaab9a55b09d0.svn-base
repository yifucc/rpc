package edu.southeast.rpc.server;

import java.util.HashMap;
import java.util.Map;

import org.apache.commons.collections4.MapUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

import edu.southeast.rpc.common.RpcDecoder;
import edu.southeast.rpc.common.RpcEncoder;
import edu.southeast.rpc.common.RpcRequest;
import edu.southeast.rpc.common.RpcResponse;
import edu.southeast.rpc.registry.ServiceRegistry;
import io.netty.bootstrap.ServerBootstrap;
import io.netty.channel.ChannelFuture;
import io.netty.channel.ChannelInitializer;
import io.netty.channel.ChannelOption;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.SocketChannel;
import io.netty.channel.socket.nio.NioServerSocketChannel;

/**
 * 框架的RPC服务器（用于将用户系统的业务类发布为 RPC服务）
 * 使用时可由用户通过spring-bean的方式注入到用户的业务系统中
 * 由于本类实现了ApplicationContextAware InitializingBean
 * spring构造本对象时会调用setApplicationContext()方法，从而可以在方法中通过自定义注解获得用户的业务接口和实现
 * 还会调用afterPropertiesSet()方法，在方法中启动netty服务器
 * @author ifcc
 * @date 2017年10月16日
 * @School SouthEast University
 * @version 1.0
 */
public class RPCServer implements ApplicationContextAware,InitializingBean{
	
	private static final Logger LOGGER=LoggerFactory.getLogger(RPCServer.class);
	
	private String serverAddress;
	private ServiceRegistry serviceRegistry;
	//用于存储业务接口和实现类的实例对象(由spring所构造)
	private Map<String, Object> handlerMap=new HashMap<String,Object>();
	
	public RPCServer(String serverAddress) {
		this.serverAddress=serverAddress;
	}
	//服务器绑定的地址和端口由spring在构造本类时从配置文件中传入
	public RPCServer(String serverAddress,ServiceRegistry serviceRegistry) {
		this.serverAddress=serverAddress;
		this.serviceRegistry=serviceRegistry;
	}

	/**
	 *
	 * 在此启动netty服务，绑定handle流水线：
	 * 1、接收请求数据进行反序列化得到request对象
	 * 2、根据request中的参数，让RpcHandler从handlerMap中找到对应的业务imple，调用指定方法，获取返回结果
	 * 3、将业务调用结果封装到response并序列化后发往客户端
	 *
	 */
	@Override
	public void afterPropertiesSet() throws Exception {
		NioEventLoopGroup bossGroup = new NioEventLoopGroup();
		NioEventLoopGroup workerGroup = new NioEventLoopGroup();
		try {
			ServerBootstrap bootstrap = new ServerBootstrap();
			bootstrap.group(bossGroup, workerGroup).channel(NioServerSocketChannel.class)
			.childHandler(new ChannelInitializer<SocketChannel>(){

				@Override
				protected void initChannel(SocketChannel channel) throws Exception {
					channel.pipeline().addLast(new RpcDecoder(RpcRequest.class))
					.addLast(new RpcEncoder(RpcResponse.class))
					.addLast(new RpcHandler(handlerMap));
					
				}
				
			
			}).option(ChannelOption.SO_BACKLOG, 128).childOption(ChannelOption.SO_KEEPALIVE, true);
			
			String[] array = serverAddress.split(":");
			String host = array[0];
			int port=Integer.parseInt(array[1]);
			
			ChannelFuture future = bootstrap.bind(host, port);
			LOGGER.debug("server started on port",port);
			
			if (serviceRegistry!=null) {
				serviceRegistry.register(serverAddress);
			}
			
			future.channel().closeFuture().sync();
		} finally {
			workerGroup.shutdownGracefully();
			bossGroup.shutdownGracefully();
		}
		
	}
	
	/**
	 * 通过注解，获取标注了rpc服务注解的业务类的----接口及impl对象，将它放到handlerMap中
	 */
	@Override
	public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
		Map<String, Object> serviceBeanMap = applicationContext.getBeansWithAnnotation(RPCService.class);
		if (MapUtils.isNotEmpty(serviceBeanMap)) {
			for (Object serviceBean : serviceBeanMap.values()) {
				String interfaceName = serviceBean.getClass().getAnnotation(RPCService.class).value().getName();
				handlerMap.put(interfaceName, serviceBean);
			}
		}
		
	}

}
